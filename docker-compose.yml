# Docker Compose for Calendar Assistant Pro Discord Bot
# Provides complete development and production environment

version: "3.8"

services:
  # =============================================================================
  # Discord Bot Service
  # =============================================================================
  discord-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: calendar-assistant-discord-bot
    restart: unless-stopped

    # Environment configuration
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO

    # Volume mounts for persistence
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env:ro

    # Networking
    networks:
      - calendar-assistant-network

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    depends_on:
      - redis
      - monitoring

  # =============================================================================
  # Redis for Session Storage (Optional Enhancement)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: calendar-assistant-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}

    volumes:
      - redis-data:/data

    networks:
      - calendar-assistant-network

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring and Logging
  # =============================================================================
  monitoring:
    image: prom/prometheus:latest
    container_name: calendar-assistant-monitoring
    restart: unless-stopped

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    ports:
      - "9090:9090"

    networks:
      - calendar-assistant-network

  # =============================================================================
  # Log Aggregation (Optional)
  # =============================================================================
  loki:
    image: grafana/loki:2.9.0
    container_name: calendar-assistant-loki
    restart: unless-stopped

    ports:
      - "3100:3100"

    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki

    command: -config.file=/etc/loki/local-config.yaml

    networks:
      - calendar-assistant-network

  # =============================================================================
  # Grafana Dashboard (Optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: calendar-assistant-grafana
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false

    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro

    ports:
      - "3000:3000"

    networks:
      - calendar-assistant-network

    depends_on:
      - monitoring
      - loki

  # =============================================================================
  # Development Environment
  # =============================================================================
  discord-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: calendar-assistant-dev

    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG

    volumes:
      - .:/app
      - ./logs:/app/logs

    networks:
      - calendar-assistant-network

    command: ["tail", "-f", "/dev/null"] # Keep container running for development

    profiles:
      - dev

# =============================================================================
# Networks
# =============================================================================
networks:
  calendar-assistant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  loki-data:
    driver: local
  grafana-data:
    driver: local
